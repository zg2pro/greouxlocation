var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Component, Directive, TemplateRef, ViewContainerRef, ViewChild, Inject, forwardRef } from '@angular/core';
import { TemplatePortal, OverlayState, Overlay } from '@angular/material';
var DisplacerPortalDirective = (function (_super) {
    __extends(DisplacerPortalDirective, _super);
    function DisplacerPortalDirective(templateRef, viewContainerRef) {
        return _super.call(this, templateRef, viewContainerRef) || this;
    }
    return DisplacerPortalDirective;
}(TemplatePortal));
DisplacerPortalDirective = __decorate([
    Directive({ selector: '[displacerPortal]' }),
    __param(0, Inject(forwardRef(function () { return TemplateRef; }))), __param(1, Inject(forwardRef(function () { return ViewContainerRef; })))
], DisplacerPortalDirective);
export { DisplacerPortalDirective };
var DisplacerComponent = (function () {
    function DisplacerComponent(_overlay) {
        this._overlay = _overlay;
        this._config = new OverlayState();
        this._overlayRef = undefined;
    }
    DisplacerComponent.prototype.ngOnDestroy = function () {
        this._overlayRef.detach();
    };
    DisplacerComponent.prototype.ngAfterViewInit = function () {
        this._overlayRef = this._overlay.create(this._config);
        this._overlayRef.attach(this._portal);
    };
    return DisplacerComponent;
}());
__decorate([
    ViewChild(DisplacerPortalDirective)
], DisplacerComponent.prototype, "_portal", void 0);
DisplacerComponent = __decorate([
    Component({
        selector: 'to-body-displacer',
        template: "<template displacerPortal>\n  <ng-content></ng-content>\n  </template>"
    }),
    __param(0, Inject(forwardRef(function () { return Overlay; })))
], DisplacerComponent);
export { DisplacerComponent };
//# sourceMappingURL=ng2-image-gallery-displacer.component.js.map